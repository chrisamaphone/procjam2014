open CLF

datatype syn = V of value | E of exp 

fun v (V value) = value | v (E exp) = Down (Lin, exp)
fun e (E exp) = exp | e (V value) = raise Fail "Value where expression required"

fun handleAtomics atomics = 
   case atomics of 
      (E (Id (x, [])) :: atomics) => E (Id (x, map v atomics))
    | (E (Xid (x, [])) :: atomics) => E (Xid (x, map v atomics))
    | [atomic] => atomic
    | _ => raise Fail ("Ill formed applicative expression ("^Int.toString (length atomics)^")")

%%

%term
  LCURLY
| RCURLY
| LBRACK
| RBRACK
| LPAREN
| RPAREN
| LET
| EQ
| IN
| DOT
| LAM
| BANG
| AFF
| COMMA
| XID of CLF.resource_var
| ID of string
| ONE
| SOLUTION
| COLON
| EOF
| APP

%nonterm
  solution of exp
| pattern of pattern
| syn of syn
| atomic of syn
| atomics of syn list
| mexp of mexp

%pos unit
%start solution
%name Trace
%noshift EOF
%eop EOF
%verbose

%%

solution: SOLUTION COLON syn (e syn)

pattern: ONE (POne)
      | XID (PXid (Lin, XID))
      | AFF XID (PXid (Aff, XID))
      | BANG XID (PXid (Pers, XID))
      | BANG ID (PId ID)
      | LBRACK pattern COMMA pattern RBRACK (PPair (pattern1, pattern2))

syn: LAM pattern DOT syn            (E (Lam (pattern, e syn)))
      | atomics                     (handleAtomics atomics)

atomic: ONE                         (V One)
      | XID                         (E (Xid (XID, [])))
      | ID                          (E (Id (ID, [])))
      | AFF XID                     (V (Down (Aff, (Xid (XID, [])))))
      | AFF ID                      (V (Down (Aff, (Id (ID, [])))))
      | BANG XID                    (V (Down (Pers, (Xid (XID, [])))))
      | BANG ID                     (V (Down (Pers, (Id (ID, [])))))
      | LPAREN syn RPAREN           (syn)
      | AFF LPAREN syn RPAREN       (V (Down (Aff, e syn)))
      | BANG LPAREN syn RPAREN      (V (Down (Pers, e syn)))
      | LBRACK syn COMMA syn RBRACK (V (Pair (v syn1, v syn2)))
      | LCURLY mexp RCURLY          (E (Lax mexp))

atomics: atomic ([atomic])
      | atomic atomics (atomic :: atomics)

mexp: LET LCURLY pattern RCURLY EQ syn IN mexp (Let (pattern, e syn, mexp))
      | syn (In (v syn))

(*
solution: SOLUTION COLON LAM lams outtuple DOT LCURLY epsilon intuple RCURLY
({consts = lams, initial = outtuple, epsilon = epsilon, final = intuple})

lams: ([])
      | BANG ID DOT LAM lams (manip ID::lams)

intuple: ONE ([])
      | XID ([XID])
      | AFF XID ([XID])
      | term ([])
      | LBRACK XID COMMA intuple RBRACK (XID::intuple)
      | LBRACK AFF XID COMMA intuple RBRACK (XID::intuple)
      | LBRACK term COMMA intuple RBRACK (intuple)

outtuple: ONE ([])
      | XID ([XID])
      | AFF XID ([XID])
      | BANG XID ([XID])
      | LBRACK XID COMMA outtuple RBRACK (XID::outtuple)
      | LBRACK AFF XID COMMA outtuple RBRACK (XID::outtuple)
      | LBRACK BANG XID COMMA outtuple RBRACK (XID::outtuple)

consts: ([])
      | BANG ID consts (manip ID::consts)

step: LET LCURLY outtuple RCURLY EQ ID consts intuple IN
({rule = ID, consts = consts, inputs = intuple, outputs = outtuple}) 

epsilon: ([])
      | step epsilon (step::epsilon)

term: ID terms (())

terms: (())
      | BANG ID terms (())
      | BANG LPAREN term RPAREN terms (())
*)
